services:
  app:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    container_name: performance-analyzer-app
    environment:
      # Use Docker profile
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      
      # Environment-specific overrides
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - VIEWER_USERNAME=${VIEWER_USERNAME}
      - VIEWER_PASSWORD=${VIEWER_PASSWORD}
      
      # Optional overrides
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED}
      - LOG_LEVEL_APP=${LOG_LEVEL_APP}
      
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/app/logs
    networks:
      - performance-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: performance-postgres
    environment:
      POSTGRES_DB: performance_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-securepassword123!}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./init-performance-tables.sql:/docker-entrypoint-initdb.d/02-init-performance-tables.sql:ro
    networks:
      - performance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d performance_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: performance-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - performance-network
    depends_on:
      - app
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.2.0
    container_name: performance-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123!}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - performance-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  app_logs:

networks:
  performance-network:
    driver: bridge